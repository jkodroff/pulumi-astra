# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrivateLinksResult',
    'AwaitableGetPrivateLinksResult',
    'get_private_links',
    'get_private_links_output',
]

@pulumi.output_type
class GetPrivateLinksResult:
    """
    A collection of values returned by getPrivateLinks.
    """
    def __init__(__self__, database_id=None, datacenter_id=None, id=None, results=None):
        if database_id and not isinstance(database_id, str):
            raise TypeError("Expected argument 'database_id' to be a str")
        pulumi.set(__self__, "database_id", database_id)
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetPrivateLinksResultResult']:
        return pulumi.get(self, "results")


class AwaitableGetPrivateLinksResult(GetPrivateLinksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateLinksResult(
            database_id=self.database_id,
            datacenter_id=self.datacenter_id,
            id=self.id,
            results=self.results)


def get_private_links(database_id: Optional[str] = None,
                      datacenter_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateLinksResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['databaseId'] = database_id
    __args__['datacenterId'] = datacenter_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('index:astra/getPrivateLinks:getPrivateLinks', __args__, opts=opts, typ=GetPrivateLinksResult).value

    return AwaitableGetPrivateLinksResult(
        database_id=__ret__.database_id,
        datacenter_id=__ret__.datacenter_id,
        id=__ret__.id,
        results=__ret__.results)


@_utilities.lift_output_func(get_private_links)
def get_private_links_output(database_id: Optional[pulumi.Input[str]] = None,
                             datacenter_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPrivateLinksResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
