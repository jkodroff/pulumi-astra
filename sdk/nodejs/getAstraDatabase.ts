// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `astra.Database` provides a datasource for Astra an Astra database. This can be used to select an existing database within your Astra Organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astra from "@pulumi/astra";
 *
 * const db = pulumi.output(astra.getAstraDatabase({
 *     databaseId: "8d356587-73b3-430a-9c0e-d780332e2afb",
 * }));
 * ```
 */
export function getAstraDatabase(args: GetAstraDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetAstraDatabaseResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("astra:index/getAstraDatabase:getAstraDatabase", {
        "databaseId": args.databaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAstraDatabase.
 */
export interface GetAstraDatabaseArgs {
    databaseId: string;
}

/**
 * A collection of values returned by getAstraDatabase.
 */
export interface GetAstraDatabaseResult {
    readonly additionalKeyspaces: string[];
    readonly cloudProvider: string;
    readonly cqlshUrl: string;
    readonly dataEndpointUrl: string;
    readonly databaseId: string;
    readonly datacenters: {[key: string]: string};
    readonly grafanaUrl: string;
    readonly graphqlUrl: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyspace: string;
    readonly name: string;
    readonly nodeCount: number;
    readonly organizationId: string;
    readonly ownerId: string;
    readonly regions: string[];
    readonly replicationFactor: number;
    readonly status: string;
    readonly totalStorage: number;
}

export function getAstraDatabaseOutput(args: GetAstraDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAstraDatabaseResult> {
    return pulumi.output(args).apply(a => getAstraDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getAstraDatabase.
 */
export interface GetAstraDatabaseOutputArgs {
    databaseId: pulumi.Input<string>;
}
