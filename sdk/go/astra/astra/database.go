// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package astra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Database struct {
	pulumi.CustomResourceState

	// The total_storage
	AdditionalKeyspaces pulumi.StringArrayOutput `pulumi:"additionalKeyspaces"`
	// The cloud provider to launch the database.
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// The cqlsh_url
	CqlshUrl pulumi.StringOutput `pulumi:"cqlshUrl"`
	// The data_endpoint_url
	DataEndpointUrl pulumi.StringOutput `pulumi:"dataEndpointUrl"`
	// The grafana_url
	GrafanaUrl pulumi.StringOutput `pulumi:"grafanaUrl"`
	// The graphql_url
	GraphqlUrl pulumi.StringOutput `pulumi:"graphqlUrl"`
	// keyspace
	Keyspace pulumi.StringOutput `pulumi:"keyspace"`
	// Astra database name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The node_count
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// The org id.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The owner id.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// Cloud region to launch the database.
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
	// The replication_factor
	ReplicationFactor pulumi.IntOutput `pulumi:"replicationFactor"`
	// The status
	Status pulumi.StringOutput `pulumi:"status"`
	// The total_storage
	TotalStorage pulumi.IntOutput `pulumi:"totalStorage"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	if args.Keyspace == nil {
		return nil, errors.New("invalid value for required argument 'Keyspace'")
	}
	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	var resource Database
	err := ctx.RegisterResource("index:astra/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("index:astra/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// The total_storage
	AdditionalKeyspaces []string `pulumi:"additionalKeyspaces"`
	// The cloud provider to launch the database.
	CloudProvider *string `pulumi:"cloudProvider"`
	// The cqlsh_url
	CqlshUrl *string `pulumi:"cqlshUrl"`
	// The data_endpoint_url
	DataEndpointUrl *string `pulumi:"dataEndpointUrl"`
	// The grafana_url
	GrafanaUrl *string `pulumi:"grafanaUrl"`
	// The graphql_url
	GraphqlUrl *string `pulumi:"graphqlUrl"`
	// keyspace
	Keyspace *string `pulumi:"keyspace"`
	// Astra database name.
	Name *string `pulumi:"name"`
	// The node_count
	NodeCount *int `pulumi:"nodeCount"`
	// The org id.
	OrganizationId *string `pulumi:"organizationId"`
	// The owner id.
	OwnerId *string `pulumi:"ownerId"`
	// Cloud region to launch the database.
	Regions []string `pulumi:"regions"`
	// The replication_factor
	ReplicationFactor *int `pulumi:"replicationFactor"`
	// The status
	Status *string `pulumi:"status"`
	// The total_storage
	TotalStorage *int `pulumi:"totalStorage"`
}

type DatabaseState struct {
	// The total_storage
	AdditionalKeyspaces pulumi.StringArrayInput
	// The cloud provider to launch the database.
	CloudProvider pulumi.StringPtrInput
	// The cqlsh_url
	CqlshUrl pulumi.StringPtrInput
	// The data_endpoint_url
	DataEndpointUrl pulumi.StringPtrInput
	// The grafana_url
	GrafanaUrl pulumi.StringPtrInput
	// The graphql_url
	GraphqlUrl pulumi.StringPtrInput
	// keyspace
	Keyspace pulumi.StringPtrInput
	// Astra database name.
	Name pulumi.StringPtrInput
	// The node_count
	NodeCount pulumi.IntPtrInput
	// The org id.
	OrganizationId pulumi.StringPtrInput
	// The owner id.
	OwnerId pulumi.StringPtrInput
	// Cloud region to launch the database.
	Regions pulumi.StringArrayInput
	// The replication_factor
	ReplicationFactor pulumi.IntPtrInput
	// The status
	Status pulumi.StringPtrInput
	// The total_storage
	TotalStorage pulumi.IntPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// The cloud provider to launch the database.
	CloudProvider string `pulumi:"cloudProvider"`
	// keyspace
	Keyspace string `pulumi:"keyspace"`
	// Astra database name.
	Name *string `pulumi:"name"`
	// Cloud region to launch the database.
	Regions []string `pulumi:"regions"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// The cloud provider to launch the database.
	CloudProvider pulumi.StringInput
	// keyspace
	Keyspace pulumi.StringInput
	// Astra database name.
	Name pulumi.StringPtrInput
	// Cloud region to launch the database.
	Regions pulumi.StringArrayInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//          DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//          DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
