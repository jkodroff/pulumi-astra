// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package index

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getSecureConnectBundleUrl` provides a datasource that generates a temporary secure connect bundle URL. This URL lasts five minutes. Secure connect bundles are used to connect to Astra using cql cassandra drivers. See the [docs](https://docs.datastax.com/en/astra/docs/connecting-to-database.html) for more information on how to connect.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-astra/sdk/go/astra"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-index/sdk/go/index"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := astra.GetSecureConnectBundleUrl(ctx, &GetSecureConnectBundleUrlArgs{
// 			DatabaseId: "f9f4b1e0-4c05-451e-9bba-d631295a7f73",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetSecureConnectBundleUrl(ctx *pulumi.Context, args *GetSecureConnectBundleUrlArgs, opts ...pulumi.InvokeOption) (*GetSecureConnectBundleUrlResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetSecureConnectBundleUrlResult
	err := ctx.Invoke("astra:index/getSecureConnectBundleUrl:getSecureConnectBundleUrl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecureConnectBundleUrl.
type GetSecureConnectBundleUrlArgs struct {
	DatabaseId string `pulumi:"databaseId"`
}

// A collection of values returned by getSecureConnectBundleUrl.
type GetSecureConnectBundleUrlResult struct {
	DatabaseId string `pulumi:"databaseId"`
	// The provider-assigned unique ID for this managed resource.
	Id  string `pulumi:"id"`
	Url string `pulumi:"url"`
}

func GetSecureConnectBundleUrlOutput(ctx *pulumi.Context, args GetSecureConnectBundleUrlOutputArgs, opts ...pulumi.InvokeOption) GetSecureConnectBundleUrlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSecureConnectBundleUrlResult, error) {
			args := v.(GetSecureConnectBundleUrlArgs)
			r, err := GetSecureConnectBundleUrl(ctx, &args, opts...)
			var s GetSecureConnectBundleUrlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSecureConnectBundleUrlResultOutput)
}

// A collection of arguments for invoking getSecureConnectBundleUrl.
type GetSecureConnectBundleUrlOutputArgs struct {
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
}

func (GetSecureConnectBundleUrlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecureConnectBundleUrlArgs)(nil)).Elem()
}

// A collection of values returned by getSecureConnectBundleUrl.
type GetSecureConnectBundleUrlResultOutput struct{ *pulumi.OutputState }

func (GetSecureConnectBundleUrlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecureConnectBundleUrlResult)(nil)).Elem()
}

func (o GetSecureConnectBundleUrlResultOutput) ToGetSecureConnectBundleUrlResultOutput() GetSecureConnectBundleUrlResultOutput {
	return o
}

func (o GetSecureConnectBundleUrlResultOutput) ToGetSecureConnectBundleUrlResultOutputWithContext(ctx context.Context) GetSecureConnectBundleUrlResultOutput {
	return o
}

func (o GetSecureConnectBundleUrlResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecureConnectBundleUrlResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecureConnectBundleUrlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecureConnectBundleUrlResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSecureConnectBundleUrlResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecureConnectBundleUrlResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecureConnectBundleUrlResultOutput{})
}
